AWSTemplateFormatVersion: 2010-09-09
Description: "Website CloudFormation stack - Lambda"
Parameters:

  ReDirectUrls:
    Type: String
    Description: "Pass in array of redirects"
    Default: "[[]]"

  ProjectS3Bucket:
    Type: String
    Description: "Project S3 Bucket Name where redirects are stored"

Resources:
  # Handle writing redirect files to S3 bucket
  ProcessRedirectsLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: >
        Lambda function to process _redirects file and populate bucket with redirect files
      Code:
        ZipFile: !Sub |
          var AWS = require('aws-sdk');
          var s3 = new AWS.S3();
          exports.handler = (event, context, callback) => { 
            const re = /[^\.](\S+)\b/g;
            const params = {
               Bucket: event.Records[0].s3.bucket.name,
               Key: '_redirects'
            }
            let redirectsList;
            let arr = [];
            let m =''          
            s3.getObject(params).promise()
              .then(data => { 
                redirectsList = data.Body.toString();
                let entries = redirectsList.split("\n");
                entries = entries.filter(Boolean)
                for (var i in entries) {
                  while ((m=re.exec(entries[i])) !== null) {
                    arr.push(m[1]);
                  }
                  let data = '<!DOCTYPE html>'
                      data += '<html>'
                      data += '<head>'
                      data += '<meta http-equiv="refresh" content="0; URL='
                      data += "'" 
                      data += arr[1]
                      data += "'"
                      data += '"/>'
                      data += '</head>'
                      data += '<body>'
                      data += '<script> window.location ='
                      data += '"'
                      data += arr[1]
                      data += '"'
                      data += "</script>"
                      data += '</body></html>'
                  
                  let putParams = {
                      Bucket : event.Records[0].s3.bucket.name,
                      Key : arr[0],
                      Body : data
                  }
                  let indexFile = arr[0]+"/index.html"
                  s3.putObject(putParams).promise()
                    .then(data => {
                      putParams.Key = indexFile
                      s3.putObject(putParams).promise()
                        .then(data => {
                          callback(null, data);
                        })
                        .catch(err => {
                          console.log('failure:', err);
                        });
                      callback(null, data);
                    })
                    .catch(err => {
                      console.log('failure:', err);
                    });
                  arr = []
                }  
              }) 
          };
      Handler: index.handler
      MemorySize: 128
      Role: !Sub ${ProcessRedirectsLambdaFunctionRole.Arn}
      Runtime: nodejs8.10
      Timeout: 25

  ProcessRedirectsLambdaFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole


  ProcessRedirectsLambdaRolePolicies:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "root"
      PolicyDocument:
        Version: "2012-10-17"
        Statement: 
          -
            Effect: Allow
            Action: "s3:*"
            Resource: 
              - !Sub "arn:aws:s3:::${ProjectS3Bucket}/*"
          - 
            Effect: Allow
            Action: "lambda:*"
            Resource:
              - "arn:aws:lambda:*:*:function:*"
      Roles:
        - Ref: "ProcessRedirectsLambdaFunctionRole"

  ProcessRedirectsLambdaFunctionVersion:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !Ref ProcessRedirectsLambdaFunction
      Description: !Sub "URL rewriting"

Outputs:
  ProcessRedirectsLambdaFunctionOutput:
    Value: !Ref "ProcessRedirectsLambdaFunctionVersion"
    Description: "The Lambda function to use on the S3 bucket"
    

